package com.yjy.fragmentevent;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.EventBusBuilder;
import org.greenrobot.eventbus.EventBusException;
import org.greenrobot.eventbus.Logger;
import org.greenrobot.eventbus.meta.SubscriberInfoIndex;

import java.util.concurrent.ExecutorService;

/**
 * <pre>
 *     @author : yjy
 *     @e-mail : yujunyu12@gmail.com
 *     @date   : 2019/05/27
 *     desc   :
 *     github:yjy239@gitub.com
 * </pre>
 */
public class FragmentEventBuilder {
    private EventBusBuilder mBusBuilder;
    FragmentEventBuilder(EventBusBuilder busBuilder) {
        this.mBusBuilder = busBuilder;
    }

    /** Default: true */
    public FragmentEventBuilder logSubscriberExceptions(boolean logSubscriberExceptions) {
        mBusBuilder.logSubscriberExceptions(logSubscriberExceptions);
        return this;
    }

    /** Default: true */
    public FragmentEventBuilder logNoSubscriberMessages(boolean logNoSubscriberMessages) {
        mBusBuilder.logNoSubscriberMessages(logNoSubscriberMessages);
        return this;
    }

    /** Default: true */
    public FragmentEventBuilder sendSubscriberExceptionEvent(boolean sendSubscriberExceptionEvent) {
        mBusBuilder.sendSubscriberExceptionEvent(sendSubscriberExceptionEvent);
        return this;
    }

    /** Default: true */
    public FragmentEventBuilder sendNoSubscriberEvent(boolean sendNoSubscriberEvent) {
        mBusBuilder.sendNoSubscriberEvent(sendNoSubscriberEvent);
        return this;
    }

    /**
     * Fails if an subscriber throws an exception (default: false).
     * <p/>
     * Tip: Use this with BuildConfig.DEBUG to let the app crash in DEBUG mode (only). This way, you won't miss
     * exceptions during development.
     */
    public FragmentEventBuilder throwSubscriberException(boolean throwSubscriberException) {
        mBusBuilder.throwSubscriberException(throwSubscriberException);
        return this;
    }

    /**
     * By default, EventBus considers the event class hierarchy (subscribers to super classes will be notified).
     * Switching this feature off will improve posting of events. For simple event classes extending Object directly,
     * we measured a speed up of 20% for event posting. For more complex event hierarchies, the speed up should be
     * >20%.
     * <p/>
     * However, keep in mind that event posting usually consumes just a small proportion of CPU time inside an app,
     * unless it is posting at high rates, e.g. hundreds/thousands of events per second.
     */
    public FragmentEventBuilder eventInheritance(boolean eventInheritance) {
        mBusBuilder.eventInheritance(eventInheritance);
        return this;
    }


    /**
     * Provide a custom thread pool to EventBus used for async and background event delivery. This is an advanced
     * setting to that can break things: ensure the given ExecutorService won't get stuck to avoid undefined behavior.
     */
    public FragmentEventBuilder executorService(ExecutorService executorService) {
        mBusBuilder.executorService(executorService) ;
        return this;
    }

    /**
     * Method name verification is done for methods starting with onEvent to avoid typos; using this method you can
     * exclude subscriber classes from this check. Also disables checks for method modifiers (public, not static nor
     * abstract).
     */
    public FragmentEventBuilder skipMethodVerificationFor(Class<?> clazz) {
        mBusBuilder.skipMethodVerificationFor(clazz);
        return this;
    }

    /** Forces the use of reflection even if there's a generated index (default: false). */
    public FragmentEventBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex) {
        mBusBuilder.ignoreGeneratedIndex(ignoreGeneratedIndex);
        return this;
    }

    /** Enables strict method verification (default: false). */
    public FragmentEventBuilder strictMethodVerification(boolean strictMethodVerification) {
        mBusBuilder.strictMethodVerification(strictMethodVerification);
        return this;
    }

    /** Adds an index generated by EventBus' annotation preprocessor. */
    public FragmentEventBuilder addIndex(SubscriberInfoIndex index) {
        mBusBuilder.addIndex(index);
        return this;
    }

    /**
     * Set a specific log handler for all EventBus logging.
     * <p/>
     * By default all logging is via {@link android.util.Log} but if you want to use EventBus
     * outside the Android environment then you will need to provide another log target.
     */
    public FragmentEventBuilder logger(Logger logger) {
        mBusBuilder.logger(logger);
        return this;
    }

    /**
     * Installs the default EventBus returned by {@link EventBus#getDefault()} using this builders' values. Must be
     * done only once before the first usage of the default EventBus.
     *
     * @throws EventBusException if there's already a default EventBus instance in place
     */
    public void installDefaultEventBus() {
        synchronized (FragmentEvent.class){
            mBusBuilder.installDefaultEventBus();
            FragmentEvent.sInstance = new FragmentEvent();
        }

    }

}
